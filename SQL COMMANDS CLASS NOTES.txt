TO START SQL*PLUS
-----------------
START->ALL PROGRAMS->ORACLE->RUN SQL COMMAND LINE

TO CONNECT TO SYS USER
----------------------
CONNECT / AS SYSDBA  -> SQL*PLUS

TO VIEW THE USER TO WHICH WE ARE CONNECTED CURRENTLY
---------------------------------------------------
SHOW USER  -> SQL*PLUS

TO LIST THE USERS IN ORACLE DATABASE
------------------------------------
SELECT USERNAME,ACCOUNT_STATUS FROM DBA_USERS;

TO UNLOCK HR USER
-----------------
ALTER USER HR ACCOUNT UNLOCK;

TO CHANGE PASSWORD OF HR USER
-----------------------------
ALTER USER HR IDENTIFIED BY HR;

TO VIEW NAME AND DBID OF DATABASE
---------------------------------
SELECT DBID,NAME FROM V$DATABASE;

TO VIEW THE LIST OF DATAFILES
-----------------------------
SELECT NAME FROM V$DATAFILE;

TO CONNECT TO THE HR USER
-------------------------
CONNECT HR/HR

TO VIEW THE LIST OF TABLES IN THE HR USER
-----------------------------------------
SELECT * FROM TAB;

SQL*PLUS:- IT IS A TOOL THAT IS USED BY PROGRAMMER OR DBA TO CONNECT TO AN ORACLE DATABASE USER. AFTER CONNECTING TO THE USER SQL*PLUS 
WILL PROVIDE A COMMAND PROMPT KNOWN AS SQL> PROMPT. AT THIS SQL PROMPT WE CAN EXECUTE THE FOLLOWING LANGUAGE COMMANDS
1. SQL COMMANDS  (STRUCTURED QUERY LANGUAGE)
2. PL/SQL COMMANDS (PROCEDURAL LANGUAGE STRUCTURED QUERY LANGUAGE)
3. SQL*PLUS COMMANDS (THESE COMMANDS ARE ASSOCIATED WITH THE SQL*PLUS TOOL).

; - SEMI-COLON IT IS THE SQL TERMINATOR , IT MUST SPECIFIED AT THE END OF A SQL COMMAND, IF NOT THEN THE COMMAND WILL NOT BE SENT TO THE ORACLE DATABASE FOR EXECUTION.

NOTE:- SQL*PLUS COMMANDS DONT NEED ;



SELECT COMMAND SYNTAX:-

SELECT *|<COL LIST> FROM <TABLE NAME> [<WHERE <CONDITION>];

* - SPECIFIES THAT WE WISH TO VIEW ALL THE COLUMNS OF A TABLE
<COL LIST> - SPECIFIES THAT WE WISH TO VIEW SPECIFIC COLUMNS IN A SPECIFIC ORDER FROM A TABLE
<TABLE NAME> - SPECIFIES THE NAME OF THE TABLE FROM WHICH WE WISH TO VIEW THE DATA
<CONDITION> - SPECIFIES A CONDITION BASED ON WHICH THE ROWS RETURNED FROM THE DATABASE ARE FILTERED

PROJECTION:- IT IS NOTHING BUT DISPLAYING FEW COLUMNS FROM A TABLE.

RESTRICTION:- IT IS NOTHING BUT RESTRICTING THE NUMBER OF ROWS THAT ARE RETURNED BY A QUERY

TO RESTRICT THE OUTPUT OF A SELECT QUERY WE NEED TO SPECIFY THE WHERE CLAUSE IN THE QUERY

SYNTAX:-

SELECT *|<COL LIST> FROM <TABLE NAME> WHERE <LEFT VALUE> 	<RELATIONAL OPERATOR> 		<RIGHT VALUE>
						|- COL NAME   	|- BASIC RELATIONAL OPERATOR	|-COL NAME
						|- CONSTANT   	|- ADVANCED RELATIONAL OPERATOR |-CONSTANT
						
BASIC RELATIONAL OPERATORS:-
>
<
>=
<=
=
!=
<>
^=

OPERATOR:- AN OPERATOR CAN BE DEFINED AS A PRE-DEFINED FUNCTION IN SQL THAT WILL ACCEPT TWO ARGUMENTS (OPERANDS) AND PROCESS THEM AND RETURN A SINGLE VALUE. THE OPERATOR WILL BE IN THE FORM OF A SINGLE SYMBOL OR A SET OF CHARACTERS.

LOGICAL OPERATORS:- 
AND
OR
NOT

AND:-

THE AND LOGICAL OPERATOR WILL RETURN TRUE OR FALSE (BOOLEAN VALUE) AFTER CHECKING TWO CONDITIONS

<CONDITION 1>	AND	<CONDITION 2> 	RESULT
	T			T	T
	F			F	F
	T			F	F
	F			T	F

DISPLAY THE EMPS WHO EARN SALARY BETWEEN 10000 AND 18000

OR:-

THE OR LOGICAL OPERATOR WILL RETURN TRUE OR FALSE (BOOLEAN VALUE) AFTER CHECKING TWO CONDITIONS

<CONDITION 1>	OR 	<CONDITION 2> 	RESULT
	T			T	T
	F			F	F
	T			F	T
	F			T	T

-- DISPLAY THE EMPLOYEES WHO DID NOT JOIN IN THE YEAR 2005

ADVANCED RELATIONAL OPERATORS:-

BETWEEN
NOT BETWEEN
IN 
NOT IN
LIKE
NOT LIKE
IS NULL
IS NOT NULL

WHAT IS A SQL FUNCTION?
A SQL FUNCTION IS A PRE-DEFINED PROGRAM THAT WILL ACCEPT ONE OR MORE VALUES IN THE FORM OF ARGUMENTS, PROCESS THE SAME AND RETURN A SINGLE VALUE.

THERE ARE TWO TYPES OF FUNCTIONS
1. SINGLE ROW FUNCTIONS:- WILL PROCESS ONE ROW IN A COLUMN AT A TIME AND RETURN  INDIVIDUAL VALUES FOR EACH ROW.
2. MULTI ROW FUNCTIONS:- WILL PROCESS MULTIPLE ROWS IN A COLUMN AT A TIME AND RETURN ONLY 1 VALUE FOR ALL THE ROWS PROCESSED. THESE ARE ALSO KNOWN AS GROUP FUNCTIONS.

DISTINCT OPERATOR WILL ELIMINATE DUPLICATES.

SELECT DISTINCT DEPARTMENT_ID FROM EMPLOYEES;

NVL FUNCTION:- THIS FUNCTION IS A SINGLE ROW FUNCTION , USING THIS FUNCTION WE CAN REPLACE A NULL VALUE WITH ANOTHER VALUE.

SELECT FIRST_NAME,COMMISSION_PCT,NVL(COMMISSION_PCT,0) FROM EMPLOYEES;

THE GROUP FUNCTIONS
1. AVG
2. MIN
3. MAX
4. COUNT
5. SUM

GROUP FUNCTIONS HAVE RESTRICTIONS
1. GROUP FUNCTION OUTPUT CANNOT BE CLUBBED WITH INDIVIDUAL COLUMN OUTPUT.

SELECT FIRST_NAME,MAX(SALARY) FROM EMP;  ---> WRONG QUERY


2. GROUP FUNCTION CANNOT APPEAR IN THE WHERE CLAUSE OF A QUERY

SELECT FIRST_NAME,SALARY FROM EMPLOYEES WHERE SALARY=MAX(SALARY);
















